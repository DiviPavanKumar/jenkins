// Roboshop-catalogue service Jenkins pipeline

pipeline {
    agent { label 'AGENT-1' }

    environment { 
        AWS_ACCOUNT_ID = "069233348386"
        AWS_REGION     = "us-east-1"
        PROJECT        = "roboshop"
        COMPONENT      = "catalogue"
    }

    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds() 
    }

    parameters {
        booleanParam(name: 'deploy', defaultValue: false, description: 'Toggle this value')
    }

    stages {
        stage('Read package.json') {
            steps {
                script {
                    sh 'ls -al'
                    def packageJson = readJSON file: 'catalogue/package.json'
                    env.appVersion = packageJson.version   // store in env to avoid "def" leak
                    echo "package version: ${env.appVersion}"
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                sh '''
                    cd catalogue
                    npm install --production
                '''
            }
        }

        stage('Docker Build and Push') {
            steps {
                script {
                    withAWS(credentials: 'aws-config', region: "${env.AWS_REGION}") {
                        sh """
                        # Ensure repo exists
                        aws ecr describe-repositories --repository-names ${PROJECT}/${COMPONENT} --region ${AWS_REGION} || \
                        aws ecr create-repository --repository-name ${PROJECT}/${COMPONENT} --region ${AWS_REGION}

                        # Login to ECR
                        aws ecr get-login-password --region ${AWS_REGION} | \
                          docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com

                        # Build & Push
                        docker build -t ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${PROJECT}/${COMPONENT}:${env.appVersion} catalogue/
                        docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${PROJECT}/${COMPONENT}:${env.appVersion}
                        """
                    }
                }
            }
        }

        stage('Trigger Deploy') {
            when {
                expression { params.deploy }
            }
            steps {
                script {
                    build job: 'catalogue-cd',
                    parameters: [
                        string(name: 'appVersion', value: "${env.appVersion}"),
                        string(name: 'deploy_to', value: 'dev')
                    ],
                    propagate: false,
                    wait: false
                }
            }
        }
    }

    post {
        always {
            echo "Always say Hi"
            deleteDir()
        }
        success {
            echo "Pipeline is Success"
        }
        failure {
            echo "Pipeline has Failed"
        }
    }
}
