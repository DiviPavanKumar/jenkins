// Roboshop-catalogue service Jenkins pipeline

pipeline {
    agent { label 'AGENT-1' }

    environment { 
        appVersion     = ''
        AWS_ACCOUNT_ID = "069233348386"
        AWS_REGION     = "us-east-1"
        REPO_NAME      = "roboshop/catalogue"
    }

    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds() 
    }

    stages {
        stage('Read package.json') {
            steps {
                script {
                    def packageJson = readJSON file: 'catalogue/package.json'
                    echo "Package Name: ${packageJson.name}"
                    env.appVersion = ${packageJson.version}
                    echo "App Version: ${env.appVersion}"
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                script {
                    sh '''
                        cd catalogue
                        npm install --production
                    '''
                }
            }
        }

        stage('Docker Build and Push') {
            steps {
                script {
                    withAWS(credentials: 'aws-config', region: "${env.AWS_REGION}") {
                        sh """
                            aws ecr get-login-password --region ${env.AWS_REGION} | \
                              docker login --username AWS --password-stdin ${env.AWS_ACCOUNT_ID}.dkr.ecr.${env.AWS_REGION}.amazonaws.com

                            docker build -t ${env.REPO_NAME}:${env.appVersion} ./catalogue

                            docker tag ${env.REPO_NAME}:${env.appVersion} \
                              ${env.AWS_ACCOUNT_ID}.dkr.ecr.${env.AWS_REGION}.amazonaws.com/${env.REPO_NAME}:${env.appVersion}

                            docker push ${env.AWS_ACCOUNT_ID}.dkr.ecr.${env.AWS_REGION}.amazonaws.com/${env.REPO_NAME}:${env.appVersion}
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Always say Hi"
            deleteDir()
        }
        success {
            echo "Pipeline is Success"
        }
        failure {
            echo "Pipeline has Failed"
        }
    }
}
